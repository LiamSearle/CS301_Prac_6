using Library; 
COMPILER Calc $NC
//  Liam Searle, Matthew Lewis, Makungu Chansa (:?)
//  Attributed calc grammar 

static string display = "";

static int ToInt(bool b) {
// return 0 or 1 according as b is false or true
  return b ? 1 : 0;
} // ToInt

static bool ToBool(int i) {
// return false or true according as i is 0 or 1
  return i == 0 ? false : true;
} // ToBool

static int Add(int a, int b, string op) {  
	if(op == "+")
		return a+b;
	else if (op == "-")
		return a-b;
	else 
		return -1;//throw error (not an ideal solution, WILL fix)
}

static int Mult(int a, int b, string op) {  
	if(op == "%")
		return a%b;
	else if (op == "*")
		return a*b;
	else if (op == "/") 
		return a/b;
	else
		return -1;//throw error (not an ideal solution, WILL fix)
}

static int Or(int a, int b) {
	 bool c = ToBool(a);
	 bool d = ToBool(b);
	 bool e = c || d;
	 return ToInt(e);
}

static int And(int a, int b) {
	 bool c = ToBool(a);
	 bool d = ToBool(b);
	 bool e = c && d;
	 return ToInt(e);
}

static int Eql(int a, int b, string op){
	 if ( op == "==" ) //oof, inception vibes.
		return ToInt((a == b));
	 else if (op == "!=")
		return ToInt((a != b));
	 else
		return -1;//throw error (not an ideal solution, WILL fix)
		
}

static int Rel(int a, int b, string op){
	if ( op == "<")
		return ToInt(a < b);
	else if (op == "<=")
		return ToInt(a <= b);
	else if (op == ">")
		return ToInt(a > b);
	else if (op == ">=")
		return ToInt(a >= b);
	else 
		return -1;//throw error (not an ideal solution, WILL fix)
}

static int Not(int a){
	bool b = ToBool(a);
	bool c = !b;
	return ToInt(c);
}

CHARACTERS
  digit      = "0123456789" .
  letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  lf         = CHR(10) .

TOKENS
  number     = digit { digit } . 
  identifier = letter { letter | digit } .

COMMENTS FROM "//" TO lf
  
IGNORE CHR(0) .. CHR(31)

PRODUCTIONS  
  Calc				
  =  (. int Value = 0; .)
  { Print<out Value>   
  | Assignment<out Value>  (. Console.WriteLine(Value.ToString()); .) 
  } "quit"
  .

  Assignment<out int Value>
  = (. Table.dec = true; Table.check = true; string id = ""; int type = 0;.)
  Variable<out id, out type> (. Table.dec = false; Table.check = false; .) //Set global vars back to false
  "="
  Expression<out Value, out type> (. Table.StoreValue(id, Value, type); .)
  SYNC ";"
  .

  Print<out int Value>
  = (. Table.dec = false; int type = 0; .)
  "print"
  Expression<out Value, out type> (. Console.WriteLine(Value.ToString()); .) 
  { WEAK ","
    Expression<out Value, out type > (. Console.WriteLine(Value.ToString()); .) 
  }
  SYNC ";"
  .

  Expression<out int Value, out int type>
  =
  AndExp<out Value, out type> 
  { "||"   (. int otherValue = 0; int otherType = 0;.)
    AndExp<out otherValue, out otherType> 
    (. 
	   type = (type == otherType ? type : 0); 
	   if (type != 0){ //both sides must be booleans.
		   Value = Value = Or(Value, otherValue);
		   type = 6; //output of || must be boolean
	   }else{ 
		   SemErr("Both sides of an Or must be the same type"); //Throw errors for statements such as: true || 5;
	   }
	.)
  } 
  .

  AndExp<out int Value, out int type>
  =
  EqlExp<out Value, out type>
  { "&&" (. int otherValue = 0; int otherType = 0;.)
    EqlExp<out otherValue, out otherType>
	 (. 
	   type = (type == otherType ? type : 0); 
	   if (type != 0){ //both sides must be booleans.
		   Value = And(Value, otherValue);
		   type = 6; //output of && must be boolean
	   }else{ 
		   SemErr("Both sides of an And must be the bool"); //Throw errors for statements such as: true && 5;
	   }
	.)
  } 
  .

  EqlExp<out int Value, out int type>
  =
  RelExp<out Value, out type>
  { (. string op = ""; .)
	EqlOp<out op>	 (. int otherValue = 0; int otherType = 0;.)
    RelExp<out otherValue, out otherType>	
    (. 
	   type = (type == otherType ? type : 0); 
	   if (type != 0){ //both sides must be booleans.
		   Value = Eql(Value,otherValue, op);
		   type = 6; //output of an EqlOp must be boolean 
	   }else{ 
		   SemErr("Both sides of an EqlOp must be the same type"); //Throw errors for statements such as: true == 5;
	   }
	.)
  }
  .

  RelExp<out int Value, out int type>
  =
  AddExp<out Value, out type>
  [ (. string op = ""; .)
    RelOp<out op>	 (. int otherValue = 0; int otherType = 0;.)
    AddExp<out otherValue, out otherType>	
	(. 
	   type = (type == otherType ? type : 0); 
	   if(type == 6){ //both sides must be booleans.
		   Value = Rel(Value,otherValue, op);
		   type = 6; // type of an RelOp will be an int
	   }else{ 
		   SemErr("Both sides of a RelOp must be bools"); //Throw errors for statements such as: a = 5 > true;
	   }
	.)
  ] 
  .


  AddExp<out int Value, out int type>  
  = 
  MultExp<out Value, out type>
  { (. string op = ""; .)
	AddOp<out op>   (. int otherValue = 0; int otherType = 0;.)
    MultExp<out otherValue, out otherType>  
	(. 
	   type = (type == otherType ? type : 0); 
	   if(type == 4){ //both sides must be ints.
		   Value =  Add(Value, otherValue,op);
		   type = 4; //type of an AddOp must be an int
	   }else{ 
		   SemErr("Both sides of a AddOp must be ints"); //Throw errors for statements such as: a = 5 + true;
	   }
	.)
  }
  .
  
  MultExp<out int Value, out int type>
  =
  UnaryExp<out Value, out type>   
  { (. string op = ""; .)
	MulOp<out op> (. int otherValue = 0; int otherType = 0;.)
    UnaryExp<out otherValue, out otherType> (.  .)
	(. 
	   type = (type == otherType ? type : 0); 
	   if(type == 4){ //both sides must be ints.
		   Value = Mult(Value, otherValue, op);
		   type = 4; //output of a MulOp must be an int
	   }else{ 
		   SemErr("Both sides of a MulOp must be ints"); //Throw errors for statements such as: a = 5 * true;
	   }
	.)
  }
  .

  UnaryExp<out int Value, out int type> (. Value = 0; int otherValue = 0; type = 0; int otherType = 0; .)
  = 
  Factor<out Value, out type> 
    | "+" UnaryExp<out otherValue, out otherType>   (. type = (type == otherType ? type : 0); 
													   if(type == 4){
														    Value = Add(Value, otherValue, "+"); 
															type = 4; //output of a MulOp must be an int
													   }else{
														   SemErr("Both sides of a AddOp must be ints"); //Throw errors for statements such as: a = 5 + true;
													   }
													.)
		
    | "-" UnaryExp<out otherValue, out otherType>	(. type = (type == otherType ? type : 0); 
													   if(type == 4){
														    Value = Add(Value, otherValue, "-"); 
															type = 4; //output of a MulOp must be an int
													   }else{
														   SemErr("Both sides of a AddOp must be ints"); //Throw errors for statements such as: a = 5 + true;
													   }
													.)
    | "!" UnaryExp<out otherValue, out otherType>   (. if(otherType == 6){ 
															Value = Not(otherValue); 
															type = 6; //output of a not must be a bool
													   }else{
															SemErr("A not must be applied to a bool"); //Throw errors for statements such as: a = !5
													   }
												    .)
  .

  Factor<out int Value, out int type> (. Value = 0; type = 0;.)
  =	  (. string id = "";  Table.check = true; .) //check true since declaration of a variable will not pass through the Factor production
      Variable<out id, out type>			
    | Number<out Value, out type> 
    | "true"			(. Value = 1; type = 6;.)
    | "false"			(. Value = 0; type = 6;.)
    | "(" Expression<out Value, out type>
      ")"
  .

  Variable<out string id, out int type>
  = (. type = 0; .)
  identifier  (. id = token.val;
				 if(!Table.check){ 
					Table.RetrieveValue(token.val); 
					type = Table.RetrieveType(token.val);
				 }else{ 
					 Table.AddRef(token.val, Table.dec, token.line); //reference added without value evaluated yet.
				 }
			  .)
  .

  Number<out int Value, out int type>
  =
  number				(.  Value =  Convert.ToInt32(token.val); type = 4;.)
  .

  MulOp<out string op> (. op = "";  .)
  =
      "*"	(. op = token.val; .)
    | "/"	(. op = token.val; .)
    | "%"	(. op = token.val; .)
    .

  AddOp<out string op> (. op = ""; .)
  =
      "+" (. op = token.val; .)
    | "-" (. op = token.val; .)
  .

  RelOp<out string op> (. op = "";  .)
  =
      "<"  (. op = token.val; .)
    | "<=" (. op = token.val; .)
    | ">"  (. op = token.val; .) 
    | ">=" (. op = token.val; .)
  .

  EqlOp<out string op>  (. op = "";  .)
  =
      "=="		(. op = token.val; .)
    | "!="		(. op = token.val; .)
  .

END Calc.
