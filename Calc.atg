using Library;  //a = 5 + 5

COMPILER Calc $NC
//  Liam Searle, Matthew Lewis, Makungu Chansa (:?)
//  Attributed calc grammar 

static string display = "";

static int ToInt(bool b) {
// return 0 or 1 according as b is false or true
  return b ? 1 : 0;
} // ToInt

static bool ToBool(int i) {
// return false or true according as i is 0 or 1
  return i == 0 ? false : true;
} // ToBool

static int Add(int a, int b, string op) {  
	if(op == "+")
		return a+b;
	else if (op == "-")
		return a-b;
	else 
		return -1;//throw error (not an ideal solution, WILL fix)
}

static int Mult(int a, int b, string op) {  
	if(op == "%")
		return a%b;
	else if (op == "*")
		return a*b;
	else if (op == "/") 
		return a/b;
	else
		return -1;//throw error (not an ideal solution, WILL fix)
}

static int Or(int a, int b) {
	 bool c = ToBool(a);
	 bool d = ToBool(b);
	 bool e = c || d;
	 return ToInt(e);
}

static int And(int a, int b) {
	 bool c = ToBool(a);
	 bool d = ToBool(b);
	 bool e = c && d;
	 return ToInt(e);
}

static int Eql(int a, int b, string op){
	 if ( op == "==" ) //oof, inception vibes.
		return ToInt((a == b));
	 else if (op == "!=")
		return ToInt((a != b));
	 else
		return -1;//throw error (not an ideal solution, WILL fix)
		
}

CHARACTERS
  digit      = "0123456789" .
  letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  lf         = CHR(10) .

TOKENS
  number     = digit { digit } .
  identifier = letter { letter | digit } .

COMMENTS FROM "//" TO lf
  
IGNORE CHR(0) .. CHR(31)

PRODUCTIONS   
  Calc				
  =
  { Print
  | Assignment
  } "quit"
  .

  Assignment
  = (. int Value = 0; .)
  Variable
  "="
  Expression<out Value>
  SYNC ";"
  .

  Print
  = (. int Value = 0; .)
  "print"
  Expression<out Value>
  { WEAK ","
    Expression<out Value>
  }
  SYNC ";"
  .

  Expression<out int Value>
  =
  AndExp<out Value> 
  { "||"   (. int otherValue = 0; .)
    AndExp<out otherValue> (. Value = Or(Value, otherValue); .)
  	(. display = Value.ToString(); .)
  } (. if(display != "") Console.WriteLine(Value.ToString()); display = ""; .)
  .

  AndExp<out int Value>
  =
  EqlExp<out Value>
  { "&&" (. int otherValue = 0; .)
    EqlExp<out otherValue> (. Value = And(Value, otherValue); .)
	(. display = Value.ToString(); .)
  } (. if(display != "") Console.WriteLine(Value.ToString()); display = ""; .)
  .

  EqlExp<out int Value>
  =
  RelExp<out Value>
  { (. string op = ""; .)
	EqlOp<out op>	 (. int otherValue = 0; .)
    RelExp<out otherValue>	(. Value = Eql(Value,otherValue, op); .)
	(. display = Value.ToString(); .)
  } (. if(display != "") Console.WriteLine(Value.ToString()); display = ""; .)
  .

  RelExp<out int Value>
  =
  AddExp<out Value>
  [ RelOp
    AddExp<out Value>
  ] .

  AddExp<out int Value>  // might need to put this elsewhere, maybe do: (. int Value = 0; .)
  = //(. int  Value = 0; .)
  MultExp<out Value>
  { (. string op = ""; .)
	AddOp<out op>   (. int otherValue = 0; .)
    MultExp<out otherValue>  (. Value =  Add(Value, otherValue,op); .)
	(. display = Value.ToString(); .)
  } (. if(display != "") Console.WriteLine(Value.ToString()); display = "";.)
  .
  
  MultExp<out int Value>
  =
  UnaryExp<out Value>
  { (. string op = ""; .)
	MulOp<out op>  (. int otherValue = 0; .)
    UnaryExp<out otherValue> (. Value = Mult(Value, otherValue, op); .)
	(. display = Value.ToString(); .)
  } (. if(display != "") Console.WriteLine(Value.ToString()); display = "";.)
  .

  UnaryExp<out int Value> (. Value = 0; .)
  =   Factor<out Value>
    | "+" UnaryExp<out Value> 
    | "-" UnaryExp<out Value>
    | "!" UnaryExp<out Value>
  .

  Factor<out int Value> (. Value = 0; .)
  =			
      Variable			
    | Number<out Value>
    | "true"			(. Value = 1; .)
    | "false"			(. Value = 0; .)
    | "(" Expression<out Value>
      ")"
  .

  Variable
  =
  identifier
  .

  Number<out int Value>
  =
  number				(.  Value =  Convert.ToInt32(token.val);.)
  .

  MulOp<out string op> (. op = ""; .)
  =
      "*"	(. op = token.val; .)
    | "/"	(. op = token.val; .)
    | "%"	(. op = token.val; .)
    .

  AddOp<out string op> (. op = ""; .)
  =
      "+" (. op = token.val; .)
    | "-" (. op = token.val; .)
  .

  RelOp
  =
      "<"
    | "<="
    | ">"
    | ">="
  .

  EqlOp<out string op>  (. op = ""; .)
  =
      "=="		(. op = token.val; .)
    | "!="		(. op = token.val; .)
  .

END Calc.
